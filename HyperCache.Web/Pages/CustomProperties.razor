@page "/custom-properties"

<h3 class="mt-4 text-primary">Custom Properties</h3>

@if (pagedResponse == null)
{
    <div class="text-center mt-4">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Loading...</p>
    </div>
}
else if (!pagedResponse.Items.Any())
{
    <div class="alert alert-info mt-4" role="alert">
        No properties found.
    </div>
}
else
{
    <table class="table table-striped table-hover mt-4">
        <thead class="table-dark">
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Value</th>
            <th scope="col">Details</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var property in pagedResponse.Items)
        {
            <tr>
                <td>@property.Name</td>
                <td>@property.Value</td>
                <td>
                    <a class="btn btn-primary btn-sm" href="/property-details/@property.Id">View</a>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <nav class="mt-4">
        <ul class="pagination">
            <li class="page-item @(pagedResponse.HasPreviousPage ? "" : "disabled")">
                <button class="page-link" @onclick="PreviousPage">Previous</button>
            </li>
            @foreach (var pageNumber in GetPageNumbers())
            {
                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                </li>
            }
            <li class="page-item @(pagedResponse.HasNextPage ? "" : "disabled")">
                <button class="page-link" @onclick="NextPage">Next</button>
            </li>
        </ul>
    </nav>
}

@code {
    private PagedResponseDto<CustomPropertyDto>? pagedResponse;
    private int currentPage = 1;
    private int pageSize = 20;

    protected override async Task OnInitializedAsync()
    {
        await LoadProperties();
    }

    private async Task LoadProperties()
    {
        pagedResponse = await Http.GetFromJsonAsync<PagedResponseDto<CustomPropertyDto>>(
            $"{ApiConstant.CustomPropertiesPaged}?page={currentPage}&pageSize={pageSize}");
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadProperties();
    }

    private async Task PreviousPage()
    {
        if (pagedResponse?.HasPreviousPage == true)
        {
            currentPage--;
            await LoadProperties();
        }
    }

    private async Task NextPage()
    {
        if (pagedResponse?.HasNextPage == true)
        {
            currentPage++;
            await LoadProperties();
        }
    }

    private IEnumerable<int> GetPageNumbers()
    {
        const int maxVisiblePages = 5;
        int startPage = Math.Max(1, currentPage - maxVisiblePages / 2);
        int endPage = Math.Min(startPage + maxVisiblePages - 1, pagedResponse?.TotalPages ?? 1);

        for (int i = startPage; i <= endPage; i++)
        {
            yield return i;
        }
    }
}
